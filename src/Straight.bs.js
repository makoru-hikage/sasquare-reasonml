// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util = require("./Util.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var BasicPart = require("./BasicPart.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Intersection = require("./Intersection.bs.js");

var getBase = BasicPart.Part.getBase;

var getIndex = BasicPart.Part.getIndex;

function isValid(p) {
  if (1 <= Curry._1(getIndex, p)) {
    return Curry._1(getIndex, p) <= Curry._1(getBase, p);
  } else {
    return false;
  }
}

function getCells(p) {
  var b = Curry._1(getBase, p);
  var r = Curry._1(getIndex, p);
  var oneToBase = Util.oneToN(b);
  return Belt_List.keepMap(oneToBase, (function (param) {
                return Intersection.findByIntegers(b, r, param);
              }));
}

function hasCell(p, cell) {
  return Belt_List.has(getCells(p), cell, Caml_obj.caml_equal);
}

var Row_sameSquare = BasicPart.Part.sameSquare;

var Row = {
  getBase: getBase,
  getIndex: getIndex,
  sameSquare: Row_sameSquare,
  isValid: isValid,
  getCells: getCells,
  hasCell: hasCell
};

var getBase$1 = BasicPart.Part.getBase;

var getIndex$1 = BasicPart.Part.getIndex;

function isValid$1(p) {
  if (1 <= Curry._1(getIndex$1, p)) {
    return Curry._1(getIndex$1, p) <= Curry._1(getBase$1, p);
  } else {
    return false;
  }
}

function getCells$1(p) {
  var b = Curry._1(getBase$1, p);
  var c = Curry._1(getIndex$1, p);
  var oneToBase = Util.oneToN(b);
  return Belt_List.keepMap(oneToBase, (function (__x) {
                return Intersection.findByIntegers(b, __x, c);
              }));
}

function hasCell$1(p, cell) {
  return Belt_List.has(getCells$1(p), cell, Caml_obj.caml_equal);
}

var Column_sameSquare = BasicPart.Part.sameSquare;

var Column = {
  getBase: getBase$1,
  getIndex: getIndex$1,
  sameSquare: Column_sameSquare,
  isValid: isValid$1,
  getCells: getCells$1,
  hasCell: hasCell$1
};

exports.Row = Row;
exports.Column = Column;
/* No side effect */
