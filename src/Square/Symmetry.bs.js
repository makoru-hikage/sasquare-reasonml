// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Row = require("./Row.bs.js");
var Cell = require("./Cell.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Column = require("./Column.bs.js");
var Js_math = require("rescript/lib/js/js_math.js");
var Intersection = require("./Intersection.bs.js");

function oddCenterIndex(length) {
  var l = length;
  return Js_math.ceil_int(l / 2);
}

function evenCenterIndices(length) {
  var l = length;
  var mainCenterIndex = Js_math.ceil_int(l / 2);
  var secondCenterIndex = mainCenterIndex + 1 | 0;
  return {
          hd: mainCenterIndex,
          tl: {
            hd: secondCenterIndex,
            tl: /* [] */0
          }
        };
}

function oppositeIndex(length, n) {
  return (length + 1 | 0) - n | 0;
}

function horizontalOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.rowIndex(cell);
  var c = Cell.columnIndex(cell);
  var row = {
    base: b,
    index: r
  };
  return Row.nthCell(row, oppositeIndex(b, c));
}

function verticalOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.rowIndex(cell);
  var c = Cell.columnIndex(cell);
  var column = {
    base: b,
    index: c
  };
  return Column.nthCell(column, oppositeIndex(b, r));
}

function descendingOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.rowIndex(cell);
  var c = Cell.columnIndex(cell);
  var r$p = oppositeIndex(b, r);
  var c$p = oppositeIndex(b, c);
  var s = r$p + c$p | 0;
  var r_o = s - r$p | 0;
  var c_o = s - c$p | 0;
  return Intersection.findByIntegers(b, r_o, c_o);
}

function ascendingOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.columnIndex(cell);
  var c = Cell.rowIndex(cell);
  return Intersection.findByIntegers(b, r, c);
}

exports.oddCenterIndex = oddCenterIndex;
exports.evenCenterIndices = evenCenterIndices;
exports.oppositeIndex = oppositeIndex;
exports.horizontalOpposite = horizontalOpposite;
exports.verticalOpposite = verticalOpposite;
exports.descendingOpposite = descendingOpposite;
exports.ascendingOpposite = ascendingOpposite;
/* No side effect */
