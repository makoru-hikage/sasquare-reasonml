// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Row from "./Row.bs.js";
import * as Cell from "./Cell.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Column from "./Column.bs.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Intersection from "./Intersection.bs.js";

function oddCenterIndex(length) {
  var l = length;
  return Js_math.ceil_int(l / 2);
}

function evenCenterIndices(length) {
  var l = length;
  var mainCenterIndex = Js_math.ceil_int(l / 2);
  var secondCenterIndex = mainCenterIndex + 1 | 0;
  return {
          hd: mainCenterIndex,
          tl: {
            hd: secondCenterIndex,
            tl: /* [] */0
          }
        };
}

function oppositeIndex(length, n) {
  return (length + 1 | 0) - n | 0;
}

function horizontalOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.rowIndex(cell);
  var c = Cell.columnIndex(cell);
  var row = {
    base: b,
    index: r
  };
  return Row.nthCell(row, oppositeIndex(b, c));
}

function verticalOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.rowIndex(cell);
  var c = Cell.columnIndex(cell);
  var column = {
    base: b,
    index: c
  };
  return Column.nthCell(column, oppositeIndex(b, r));
}

function descendingOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.rowIndex(cell);
  var c = Cell.columnIndex(cell);
  var r$p = oppositeIndex(b, r);
  var c$p = oppositeIndex(b, c);
  var s = r$p + c$p | 0;
  var r_o = s - r$p | 0;
  var c_o = s - c$p | 0;
  return Intersection.findByIntegers(b, r_o, c_o);
}

function ascendingOpposite(cell) {
  var b = Curry._1(Cell.getBase, cell);
  var r = Cell.columnIndex(cell);
  var c = Cell.rowIndex(cell);
  return Intersection.findByIntegers(b, r, c);
}

export {
  oddCenterIndex ,
  evenCenterIndices ,
  oppositeIndex ,
  horizontalOpposite ,
  verticalOpposite ,
  descendingOpposite ,
  ascendingOpposite ,
  
}
/* No side effect */
